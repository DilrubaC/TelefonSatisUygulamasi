<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ımageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ımageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADg
        CAAAAk1TRnQBSQFMAgEBAgEAARABAAEQAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGSIAAwMBBAMdASkDPAFoA0gBrgM3Ad8DEAH5AwkB+wMwAegDRwG+A0IBfAMm
        ATkDBAEGNAADBQEHAwYBCAMAAQHMAAMCAQMDPgFtAzgB1AMMAfoDRQHFA0QBhQM6AWQDOQFiA0EBeQNI
        AbADIQHvAywB4wNGAZMDEwEaJAADDQERAzsBYwNIAaEDPwG5Az8BugNGAaoDQgF1AxoBJQMAAQG8AAME
        AQYDSwGVAwMB/ANEAc8DJgE4GAADGAEiA04BtAMHAfoDRwG9AwsBDxgAAwUBBwM6AWIDIwHxAw0B9wMn
        AegDTgHAA04BvAMzAeADDQH2AxkB8wNGAYMDBwEJtAADCgENA0YBjAMCAfwDRgGTAxABFSAAAwEBAgM9
        AWsDJAHmA0UBvQMTARoQAAMKAQ4DSAGUAzAB5QNGAZwDKgFAAwYBCAgAAwEBAgMgAS8DRQGFAy4B4wNH
        AboDHgErsAADMgFSAxsB7wNJAZwDCwEPKAADBQEHAz4BbAMGAfsDRwGUAwQBBggAAwEBAgNMAaADMwHg
        AzUBWAMGAQgYAAMEAQYDIwE0A0IB0QNHAboDBwEJqAADAQECA0UBwANCAdEDAgEDFAADLQFGAz8BcAMG
        AQgQAAMBAQIDTgG0AywB4wMmATkHAAEBAzgBXgMJAfoDPwFtAwEBAgMAAQEDBAEFEAADAgQDAQQEAAMj
        ATQDLgHjA0YBgwMAAQGkAAMlATcDGAH0AzgBXxgAA0sBmwNCAcQDEAEVFAADGAQiAe8DQQF7BAADEAEV
        A0EBwANFAb8DBwEKBAADJQE3A0QBgQMQARYIAAMEAQUDPgFsAzcBXQMDBAQBBQNFAYQDGQHzAxsBJqQA
        A0wBmgM0AdkDHgErGAADSwGcA0IBxQMQARUYAANJAbEDRwG+BAADKAE9AycB5wMpAT8IAAMhATADNAHi
        A0wBqwMFAQcDBAEGA0gBiQMlAewDPQFrAwEBAgQAAyABLgMMAfYDQgF2pAADQQHcA0ABvQMOARMIAAMD
        AQQDDQERAw0BEgMNARIDSwGjA0EByQMaASUDDQESAw0BEQMFAQcMAANBAXkDLwHpBAADNgFaAy8B6QMA
        AQEIAAMBAQIDNQFWAycB6ANNAbIDRQGDAx4B7wNHAYcDAwEECAADAQECAzMB4QNGAaoDAAEBoAADEAH5
        A0IBsQMHAQoIAAM0AVQDRQG5A0UBuQNFAbkDLwHkAx8B7wNDAb8DRQG5A0UBuQNDAXgMAAM5AWEDCQH7
        BAADPQFuA0UB0BAAAwMBBAM4AV4DCAH8Aw0B+gNFAYIDBAEFEAADTwG9Az8BugMGAQigAAMXAfUDQgGy
        AwgBCwgAAysBQgNNAbADTgGxA04BsQM5AeADJgHtA00BtwNOAbEDTQGwAzkBYAwAAzoBZAMQAfkEAAM8
        AWsDQwHTEAADBAEFA0gBiwMEAf0DBwH8A00BsQMFAQcQAANOAcADPwG5AwUBB6AAA0sBzgM9AcMDEgEY
        GAADSwGcA0IBxQMQARUYAANEAYUDOAHgBAADMwFTAyoB7AMHAQkIAAMFAQcDQwF5AycB6wNIAYoDOAFe
        AycB6ANMAasDEAEWCAADBgEIAycB6ANIAaGkAANGAYIDLQHiAyMBNBgAA0sBnANCAcUDEAEVGAADRQHF
        A0gBrgQAAyMBNAMtAeADOAFdCAADLgFIAzQB4gNCAXgDBAEFAwMBBAM1AVYDNAHiA0QBgAMEAQUEAAMq
        AUEDCwH4AzsBY6QAAxMBGgMTAfgDPwF0GAADSwGcA0IBxQMQARUUAAMmATgDDwH5AzsBZwQAAwcBCgND
        AbUDMQHgAwsBDwQAAxIBGQMuAUcDBQEHCwABAQMhATADJAE2AwEBAgMGAQgDRgGcAyEB8AMMARCoAANJ
        AaQDNAHjAxgBIhQAAyoBQQM8AWgDBgEIEAADEAEVA0QBzwM4AdQDHQEpCAADLAFEAx4B8ANIAY0DCQEM
        IwABAQM2AVkDMAHlAzoBYKwAAycBOwMrAeADPgHHAxoBJSgAAwwBEANHAZQDAwH9Az4BbQMCAQMIAAMB
        AQIDPAFnAy8B5ANIAY0DDAEQGAADCAELAz8BbgMzAeADRwGTAwQBBqwAAwEBAgM7AWUDAAH/A0ABxgMY
        ASEgAAMCAQMDSQGcAwIB/ANLAZUDAgEDEAADAgEDAzwBZwMeAfADMQHgAzgBXQMHAQkLAAEBAyoBQQNG
        AcEDCQH6A0sBngMKAQ23AAEBAzsBZQMrAeADNAHjAz8BdQMjATQDEgEZAwcBCgMHAQkDDwEUAx4BKwM5
        AWADQgHRAxsB7wNGAYwDBAEGGAADAQECAywERAG0Ay4B4AMpAe0DQgHTA0IB0QMsAeoDJwHoA0ABvwM4
        AV4DAgEDvwABAQMnATsDSQGkAxMB+AMtAeIDPQHDA0IBsgNCAbEDQAG9AzQB2AMYAfQDRQHAAzIBUgMK
        AQ0kAAMHAQoDIwE0AzMBVAM9AWwDPQFuAzYBWgMpAT4DEAEVAwABAcwAAxMBGgNGAYIDSwHOAxcB9QMQ
        AfkDQQHcA0wBmgMlATcDAQEC/wAFAAFCAU0BPgcAAT4DAAEoAwABUAMAARQDAAEBAQABAQUAAfAXAAP/
        AQAB8AEAAf8B+AH/BwAB4AEAAX8BwAEfBwABwQH4AT8BAAEPBwABgwH8AR4BBgEHBwABhwH+AQwBHwGD
        BwABDwGPAQgBDwEhBwABHwGPAYgBRgEBBwABHwGPAcgBwAERBwABGAEBAcgBwAEwBwABGAEBAckB4AF4
        BwABGAEBAckB4AF4BwABHwGPAcgBwAExBwABHwGPAcgBwAERBwABHwGPAYgBRgEBBwACjwEMAT8BwwcA
        AYcB/gEMAR8BgwcAAYMB/AEeAQYBBwcAAcABAAE/AQABDwcAAeABAAF/AcABHwcAAfwBAQP/BwAL
</value>
  </data>
</root>